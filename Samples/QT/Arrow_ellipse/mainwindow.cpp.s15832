#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QLineF>
#include <QPixmap>
#include <QLabel>
#include <QHBoxLayout>
#include <QMessageBox>

extern int x,y;
QVector<QPointF> my_fail_points;
uint16_t list[20];

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    setAttribute(Qt::WA_NoSystemBackground);

    polyPoints << QPointF(::x/2,50);
    polyPoints << QPointF(::x/4*3,::y/4);
    polyPoints << QPointF(::x/2,::y -50);
    polyPoints << QPointF(::x/4,::y/4);
    polyPoints << QPointF(::x/4*3,::y/4*3);
    polyPoints << QPointF(::x/4,::y/4 * 3);

    foreach(QPointF point, polyPoints)
        drawPoints << point;
    //setAttribute(Qt::WA_PaintOnScreen);
   // ui->setAutoFillBackground(true);

    ui->setupUi(this);
    // Get all available COM Ports and store them in a QList.
//    QList<QextPortInfo> ports = QextSerialEnumerator::getPorts();

//    // Read each element on the list, but
//    // add only USB ports to the combo box.
//    for (int i = 0; i < ports.size(); i++) {
//        if (ports.at(i).portName.contains("USB")){
//            ui->comboBox_Interface->addItem(ports.at(i).portName.toLocal8Bit().constData());
//        }
//    }
    // Show a hint if no USB ports were found.
//    if (ui->comboBox_Interface->count() == 0){
//        ui->textEdit_Status->insertPlainText("No USB ports available.\nConnect a USB device and try again.");
//    }
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::changeEvent(QEvent *e)
{
    QMainWindow::changeEvent(e);
    switch (e->type()) {
    case QEvent::LanguageChange:
        ui->retranslateUi(this);
        break;
    default:
        break;
    }
}

void MainWindow::on_pushButton_open_clicked()
{
    port.setQueryMode(QextSerialPort::EventDriven);
    port.setPortName("COM6");
    port.setBaudRate(BAUD115200);
    port.setFlowControl(FLOW_OFF);
    port.setParity(PAR_NONE);
    port.setDataBits(DATA_8);
    port.setStopBits(STOP_1);
    port.open(QIODevice::ReadWrite);
  //  qDebug() << "Line 61";
    if (!port.isOpen())
    {
//        error.setText("Unable to open port!");
//        error.show();
        return;
    }
 //   qDebug() << "Line 68";
    QObject::connect(&port, SIGNAL(readyRead()), this, SLOT(receive()));

    ui->pushButton_close->setEnabled(true);
    ui->pushButton_open->setEnabled(false);
    //ui->comboBox_Interface->setEnabled(false);
}

void MainWindow::on_pushButton_close_clicked()
{
    if (port.isOpen())port.close();
    ui->pushButton_close->setEnabled(false);
    ui->pushButton_open->setEnabled(true);
    //ui->comboBox_Interface->setEnabled(true);

}

void MainWindow::receive()
{
this->update();
}

void MainWindow::paintEvent(QPaintEvent *e)
{
    QPainter painter(this);
    int radius = 25;
    QVector<QPointF> my_points;


    QStringList lk_list, list;
    QRegExp rx("(\\d+)");

    QString myString;
    //QStringList list,;




    lk_list << "1234" << "5678" << "0123" << "4567" << "8901" << "2345";
    // make a pen
    QPen my_pen_red; QPen my_pen_green; QPen my_pen_black; QPen my_pen_yellow;
    QPen my_pen_blue;
    my_pen_red.setWidth(4);
    my_pen_yellow.setWidth(4);
    my_pen_black.setWidth(4);
    my_pen_green.setWidth(4);
    my_pen_blue.setWidth(4);
    my_pen_red.setColor(Qt::red);
    my_pen_yellow.setColor(Qt::yellow);
    my_pen_black.setColor(Qt::black);
    my_pen_green.setColor(Qt::green);
    my_pen_blue.setColor(Qt::blue);
    painter.setPen(my_pen_black);
   // painter.drawLine(polyPoints.at(0), polyPoints.at(1));
    foreach(QPointF point, drawPoints)
    {
      //  qDebug() << "Line 137";
        painter.drawEllipse( point, radius, radius );
    }
    painter.setPen(my_pen_red);
    //qDebug() << "Failpoints" << my_fail_points;
    foreach(QPointF point, my_fail_points)
    {
        painter.drawEllipse( point, radius, radius );
        //qDebug() << "Line 142";
    }

    painter.setPen(my_pen_green);
    painter.drawEllipse( polyPoints.at(0), radius, radius );

    static QString str;
   // str.sprintf("%s", "Fail,8901");
    //list = str.split(QRegExp("\\W+"));

        char ch;
        char msg[50];
        int counter = 0;
        while (port.getChar(&ch))
        {
            str.append(ch);
            if (ch == '\n')     // End of line, start decoding
            {
                painter.eraseRect(0,0,::x,::y);
                str.remove("\n", Qt::CaseSensitive);
                str.remove("\r", Qt::CaseSensitive);
                //ui->textEdit_Status->append(str);

                //qDebug() << "Str value: " << str;
                if (str.contains("Asset"))
                {
                    str.remove("Asset,", Qt::CaseSensitive);
                    str.remove(",", Qt::CaseSensitive);
                    list = str.split(QRegExp("\\W+"));
                    qDebug() << str;
                    qDebug() << list;
                    int pos = 0;

                    while ((pos = rx.indexIn(str, pos)) != -1) {
                        list << rx.cap(1);
                        pos += rx.matchedLength();
                    }
//                    const QString myString = "100014003546";
//                    const QByteArray data = QByteArray::fromHex( str.toLocal8Bit() );
//                    qDebug() << data;

                   // qDebug() << list;


                    //qDebug() << "Str value: " << str;
                    if(!list.isEmpty()){                       
                        for (int i=0; i < list.size(); i++){
                            if (lk_list.contains(list.at(i), Qt::CaseInsensitive))
                            {
                             //   qDebug() << lk_list.indexOf(list.at(i));
                                my_points << polyPoints.at(lk_list.indexOf(list.at(i)));
                             //   qDebug() << polyPoints.at(lk_list.indexOf(list.at(i)));
                            }
                        }

                        // make a pen
                        QPen my_pen_blue;
                        my_pen_blue.setWidth(4);
                        my_pen_blue.setColor(Qt::blue);
                        painter.setPen(my_pen_blue);
                        for(int k = 0; k < my_points.size() - 1; k++)
                            painter.drawLine(my_points.at(k), my_points.at(k+1));

                       // this->resize(::x,::y);
                        //QCoreApplication::processEvents();
                        //this->repaint();
                    }
                }

                else if(str.contains("Fail"))
                {
                    str.remove("Fail,", Qt::CaseSensitive);
                    int pos = 0;

                    while ((pos = rx.indexIn(str, pos)) != -1) {
                        list << rx.cap(1);
                        pos += rx.matchedLength();
                    }
                    //list = str.split(QRegExp("\\W+"));
                   // qDebug() << "Str value: " << str;
                    if(!list.isEmpty()){
                            if (lk_list.contains(list.at(0), Qt::CaseInsensitive))
                            {
                             //   qDebug() << lk_list.indexOf(list.at(i));
                                my_fail_points << polyPoints.at(lk_list.indexOf(list.at(0)));
                                drawPoints.remove(lk_list.indexOf(list.at(0)));
                                //lk_list.removeAt();
                                qDebug() << drawPoints;
                                qDebug() << my_fail_points;
                               // painter.setPen(my_pen_red);
                               // painter.drawEllipse( my_fail_points.at(0), radius, radius );

                             //   qDebug() << polyPoints.at(lk_list.indexOf(list.at(i)));
                            }
                        }
                }
                this->update();
                str.clear();
                list.empty();
                lk_list.empty();
                my_points.clear();
                painter.resetMatrix();
                }
                //this->repaint();    // Update content of window immediately

            }
        }
